pool:
  vmImage: ubuntu-latest

name: $(BuildID)-$(Build.SourceBranchName)

variables:
  server_imageName: rtuitlab/screen-cyberbird-server
  server_artifactName: server-build
  ${{ if notIn(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    server_serviceName: 'no'
    imageTags: 'no'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: 'production'
    server_serviceName: cyberbird_server
    imageTags: |
      $(Build.BuildId)
      latest

stages:
- stage: Buildnode
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          New-Item WebClient\.env
          Set-Content WebClient\.env 'REACT_APP_URL=/'
    - script: npx jake
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'WebClient/build'
        Contents: '**'
        TargetFolder: 'Server/deploy/static'
        CleanTargetFolder: true
    - publish: Server/deploy
      artifact: ${{ variables.server_artifactName }}
- stage:
  displayName: Push Docker Image
  condition: and(succeeded(), ${{variables.buildImage}})
  jobs:
  - job: Build
    displayName: Build
    steps:
    - download: current
      artifact: ${{ variables.server_artifactName }}
      displayName: Download
    - task: Docker@2
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: ${{variables.server_imageName}}
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/${{ variables.server_artifactName }}/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/${{ variables.server_artifactName }}'
        tags: ${{variables.imageTags}}
- stage: deploy
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
    - deployment: DeployServer
      displayName: Deploy server
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          on:
            failure:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'swarm manager'
                    runOptions: 'commands'
                    commands: 'docker service rollback ${{variables.server_serviceName}}'
                    readyTimeout: '20000'
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image ${{ variables.server_imageName }}:$(Build.BuildId) ${{variables.server_serviceName}}'
                  readyTimeout: '20000'
